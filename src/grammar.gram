---
import { Environment } from "./env";
import { callFunc, idxList, Value } from "./values";
import { unescapeChars } from "./litreacha";
import * as Asserts from "./asserts";
import * as Checks from "./checks";
import { orBinOp, orQuickBinOp, andBinOp, andQuickBinOp,
    binOpEvalFn, binOpQuickEvalFn } from "./binops";
import { objLookupsEval, postfixArgsEval, csArgsEval, prefEval, EvalFn } from "./evals";
import { qEvalToEval } from "./evals";
import * as Quick from "./quickevals";
---
Program     := stmts=AsgnStmt* _
AsgnStmt    := IfStmt
             | BlockStmt
             | NuairStmt
             | LeStmt
             | CCStmt
             | BrisStmt
             | CtlchStmt
             | GniomhStmt
             | ToradhStmt
             | AssgnStmt
             | DefnStmt
             | Expr
NonAsgnStmt := IfStmt
             | NuairStmt
             | LeStmt
             | CCStmt
             | BrisStmt
             | ToradhStmt
             | BlockStmt
             | AssgnStmt
             | Expr
IfStmt      := _ 'm[áa]' &gap expr=Expr &gap stmt=NonAsgnStmt elsebranch={_ 'n[oó]' &gap stmt=NonAsgnStmt}?
BlockStmt   := _ '{' blk=AsgnStmt* _ '}'
NuairStmt   := _ 'nuair-a' expr=Expr &gap stmt=NonAsgnStmt
LeStmt      := _ 'le' &gap id=ID _ 'idir' _ '\('strt=Expr _ ',' end=Expr step={_ ',' step=Expr}? _ '\)' stmt=NonAsgnStmt
DefnStmt    := _ id=ID _ ':=' _ expr=Expr
AssgnStmt   := _ lhs=Postfix _ op=AsgnOp _ expr=Expr
GniomhStmt  := _ 'gn[íi]omh' &gap id=ID _ '\(' args=CSIDs? _ '\)' _ '{'
    stmts=AsgnStmt*
_ '}'
CtlchStmt   := _ 'creatlach' &gap id=ID tuis={_ 'ó' id=ID}? _ '{'
    gniomhs=GniomhStmt*
_ '}'
BrisStmt    := _ 'bris'
CCStmt      := _ 'chun-cinn'
ToradhStmt  := _ 'toradh' &gap exp=Expr?
Expr        := And
And         := head=Or tail={_ '\&' trm=Or}*
               .evalfn = EvalFn { return andBinOp(this); }
               .qeval = Quick.MaybeEv { return andQuickBinOp(this); }
Or          := head=Eq tail={_ '\|' trm=Eq}*
               .evalfn = EvalFn { return orBinOp(this) }
               .qeval = Quick.MaybeEv { return orQuickBinOp(this); }
Eq          := head=Comp tail={_ op='[!=]=' trm=Comp}*
               .evalfn = EvalFn { return binOpEvalFn(this) }
               .qeval = Quick.MaybeEv { return binOpQuickEvalFn(this); }
Comp        := head=Sum tail={_ op=Compare trm=Sum}*
               .evalfn = EvalFn { return binOpEvalFn(this) }
               .qeval = Quick.MaybeEv { return binOpQuickEvalFn(this); }
Sum         := head=Product tail={_ op=PlusMinus trm=Product}*
               .evalfn = EvalFn { return binOpEvalFn(this) }
               .qeval = Quick.MaybeEv { return binOpQuickEvalFn(this); }
Product     := head=Prefix tail={_ op=MulDiv trm=Prefix}*
               .evalfn = EvalFn { return binOpEvalFn(this); }
               .qeval = Quick.MaybeEv { return binOpQuickEvalFn(this); }
Prefix      := _ op='-|!'? pf=Postfix
               .evalfn = EvalFn { return prefEval(this); }
               .qeval = Quick.MaybeEv { return Quick.qPrefEval(this); }
Postfix     := at=ObjLookups ops=PostOp*
               .evalfn = EvalFn { return postfixArgsEval(this); }
               .qeval = Quick.MaybeEv { return Quick.qPostfixArgsEval(this); }
ObjLookups  := attrs={id=ID '@' !wspace}* root=Atom
               .evalfn = EvalFn { return objLookupsEval(this); }
               .qeval = Quick.MaybeEv { return Quick.qObjLookupsEval(this); }
PostOp      := '\(' args=CSArgs? _ '\)' | '\[' expr=Expr _ '\]'
Atom        :=  _ '\(' trm=Expr '\)'
               .evalfn = EvalFn { return (env: Environment) => this.trm.evalfn(env); }
               .qeval = Quick.MaybeEv {
                    const childF = this.trm.qeval;
                    return childF === null ? null : childF.bind(this.trm);
               }
             | ID
             | Litreacha
             | Int
             | Bool
             | Neamhni
             | ListLit
ListLit     := _ '\[' els=CSArgs? _ '\]'
               .evalfn = EvalFn {
                   return (env: Environment) => this.els ? this.els.evalfn(env) : Promise.resolve([]);
               }
               .qeval = Quick.MaybeEv { return Quick.qListLitEval(this); }
CSArgs      := head=Expr tail={_ ',' exp=Expr}*
               .evalfn = (env:Environment)=>Promise<Value[]> { return csArgsEval(this); }
               .qeval = ((env:Environment)=>Value[])|null { return Quick.qCSArgsEval(this); }
CSIDs       := head=ID tail={_ ',' id=ID}*
ID          := _ !{Keyword gap} id='[a-zA-Z_áéíóúÁÉÍÓÚ]+'
               .evalfn = EvalFn { return qEvalToEval(Quick.qIdEval(this.id)); }
               .qeval = Quick.EvalFn { return Quick.qIdEval(this.id); }
Bool        := _ bool='f[ií]or|br[eé]ag'
               .evalfn = EvalFn { return qEvalToEval(Quick.qBoolEval(this.bool)); }
               .qeval = Quick.EvalFn { return Quick.qBoolEval(this.bool); }
Neamhni     := _ 'neamhn[ií]'
               .evalfn = EvalFn { return () => Promise.resolve(null); }
               .qeval = Quick.EvalFn { return () => null; }
Int         := _ int='-?[0-9]+(?:\.[0-9]+)?'
               .evalfn = EvalFn { return qEvalToEval(Quick.qIntEval(this.int)); }
               .qeval = Quick.EvalFn { return Quick.qIntEval(this.int); }
Litreacha   := _ '\'' val='([^\'\\]|\\.)*' '\''
               .evalfn = EvalFn { return qEvalToEval(Quick.qLitreachaEval(this.val)); }
               .qeval = Quick.EvalFn { return Quick.qLitreachaEval(this.val); }
_           := wspace*
wspace      := '(?:\s|>--(?:(?!--<).)*(--<|\n|$))'
gap         := { wspace | '[^a-zA-Z0-9áéíóúÁÉÍÓÚ]' }+ | '$'
PlusMinus   := '\+|-'
AsgnOp      := '=|\+=|\*=|-=|%=|\/='
MulDiv      := '\*|\/\/|%|\/'
Compare     := '<=|>=|<|>'
Keyword     := 'm[áa]' | 'n[oó]' | 'nuair-a' | 'f[ií]or|br[eé]ag'
    | 'gn[ií]omh' | 'chun-cinn' | 'neamhn[ií]' | 'toradh' | 'creatlach'
